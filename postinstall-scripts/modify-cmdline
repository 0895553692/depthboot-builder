#!/usr/bin/env python3

import os
from urllib.request import urlopen
from urllib.error import URLError
import argparse
from functions import *


# parse arguments from the cli.
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', '--append', action="store_true", dest="append", default=False,
                        help="Append a flag rather than replacing the whole command line")
    parser.add_argument('-r', '--reset', action="store_true", dest="reset", default=False,
                        help="Reset to default command line")
    parser.add_argument('-s', '--show-current', action="store_true", dest="show", default=False,
                        help="Show current command line")
    parser.add_argument(dest='cmdline', type=str, nargs="?",
                        help="New, full kernel command line in quotes, example: \n"
                             + r'modify-cmdline "console=tty1 root=PARTUUID=7d83c214-289e-4e8b-93cc-685aea502'
                               r'f59 i915.modeset=1 rootwait rw fbcon=logo-pos:center,logo-count:1 loglevel=0 splash"')
    return parser.parse_args()


def install_packages() -> None:
    if not path_exists('/usr/bin/futility'):
        if path_exists('/usr/bin/apt'):
            bash('sudo apt install -y vboot-kernel-utils')
        elif path_exists("/usr/bin/pacman"):
            bash("pacman -S vboot-kernel-utils --noconfirm")
        elif path_exists("/usr/bin/dnf"):
            bash("dnf install vboot-kernel-utils --assumeyes")
        else:
            print("Vboot-kernel-utils not found. Please install vboot-kernel-utils or vboot-utils using your distros" +
                  " package manager.")
            exit(1)


if __name__ == '__main__':
    # Elevate script to root
    if not os.geteuid() == 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)

    args = process_args()

    if args.show:
        print("Current command line:\n" + "\033[96m" + bash("cat /proc/cmdline") + "\033[0m")
        exit(1)

    print("Reading partition table")
    partitions = bash("mount | grep ' / ' | cut -d' ' -f 1")
    partitions = partitions[:len(partitions) - 1]  # get device "name"
    if args.reset:
        print("Resetting to default command line")
        print("Downloading default command line from github")
        try:
            temp_cmdline = urlopen(
                "https://raw.githubusercontent.com/eupnea-linux/eupnea/main/configs/kernel.flags").read().decode(
                "utf-8")
        except URLError:
            print("\033[91m" + "Failed to reach github. Fallback to hardcoded default cmdline" + "\033[0m")
            temp_cmdline = "console=tty1 root=PARTUUID=${USB_ROOTFS} i915.modeset=1 rootwait rw fbcon=logo-pos:center" \
                           ",logo-count:1 loglevel=0 splash"
        # get partuuid of rootfs
        rootfs_partuuid = bash(f"blkid -o value -s PARTUUID {partitions}2")
        new_cmdline = temp_cmdline.replace("${USB_ROOTFS}", rootfs_partuuid)
    else:
        if args.cmdline is None:
            print("Please provide the new commandline or use -a to append a flag.")
            exit(1)
        new_cmdline = args.cmdline[0].strip()
    install_packages()
    kernel_partition = f"{partitions}1"
    # Write the new kernel commandline to a file
    with open('cmdline', 'w') as file:
        if args.append:
            # Get the current kernel's command line
            current_cmdline = bash("cat /proc/cmdline")
            file.write(f"{current_cmdline} {new_cmdline}")  # space needed as both args have no spaces before and after
        else:
            file.write(new_cmdline)
    # Copy old kernel partition
    bash(f"dd if={kernel_partition} of=kernel_part")
    print("Signing new kernel")
    bash("futility vbutil_kernel --repack new_kernel_part --version 1 --keyblock " +
         "/usr/share/vboot/devkeys/kernel.keyblock --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk " +
         "--oldblob kernel_part --config cmdline")
    print("Flashing new kernel")
    bash(f'sudo dd if=new_kernel_part of={kernel_partition}')
