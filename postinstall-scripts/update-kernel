#!/usr/bin/env python3

import os
import sys
from urllib.request import urlretrieve, urlopen
from urllib.error import URLError
from time import sleep
from threading import Thread
import argparse
from functions import *


# parse arguments from the cli. Only for testing/advanced use. 95% of the arguments are handled by the user_input script
def process_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p', '--local-path', dest="local_path",
                        help="Local path for kernel files to use instead of downloading from github.")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose", default=False,
                        help="Print more output")
    parser.add_argument("--dev", action="store_true", dest="dev_build", default=False,
                        help="Use kernels from latest dev build. May be unstable.")
    parser.add_argument("--alt", action="store_true", dest="alt", default=False,
                        help="Use alt kernel. Recommended for older devices.")
    parser.add_argument("--exp", action="store_true", dest="exp", default=False,
                        help="Use experimental 5.15 chromeos kernel. It is newer, but Google does not use "
                             "it in production yet.")
    parser.add_argument("--mainline", action="store_true", dest="mainline", default=False,
                        help="Use mainline linux kernel instead of modified chromeos kernel. Might provide more "
                             "functionality on newer devices.")
    return parser.parse_args()


# Clean /tmp from eupnea files
def prepare_host() -> None:
    print("\033[96m" + "Preparing host system" + "\033[0m")

    print("Creating /tmp/eupnea-update")
    rmdir("/tmp/eupnea-update")
    mkdir("/tmp/eupnea-update")

    print("Installing necessary packages")
    # install cgpt and futility
    if path_exists("/usr/bin/apt"):
        bash("apt install cgpt vboot-kernel-utils -y")
    elif path_exists("/usr/bin/pacman"):
        bash("pacman -S cgpt vboot-utils --noconfirm")
    elif path_exists("/usr/bin/dnf"):
        bash("dnf install cgpt vboot-utils --assumeyes")
    else:
        print("\033[91m" + "cgpt and futility not found, please install them using your disotros package manager"
              + "\033[0m")
        exit(1)


# download kernel files from GitHub
def download_kernel() -> None:
    print("\033[96m" + "Downloading kernel binaries from github" + "\033[0m")
    if args.dev_build:
        url = "https://github.com/eupnea-linux/kernel/releases/download/dev-build/"
    else:
        url = "https://github.com/eupnea-linux/kernel/releases/latest/download/"
    try:
        if args.mainline:
            url = "https://github.com/eupnea-linux/mainline-kernel/releases/latest/download/"
            urlretrieve(f"{url}bzImage", filename="/tmp/eupnea-update/bzImage")
            urlretrieve(f"{url}modules.tar.xz", filename="/tmp/eupnea-update/modules.tar.xz")
        else:
            if args.alt:
                print("Downloading alt kernel")
                urlretrieve(f"{url}bzImage-alt", filename="/tmp/eupnea-update/bzImage")
                urlretrieve(f"{url}modules-alt.tar.xz", filename="/tmp/eupnea-update/modules.tar.xz")
            elif args.exp:
                print("Downloading experimental 5.15 kernel")
                urlretrieve(f"{url}bzImage-exp", filename="/tmp/eupnea-update/bzImage")
                urlretrieve(f"{url}modules-exp.tar.xz", filename="/tmp/eupnea-update/modules.tar.xz")
            else:
                urlretrieve(f"{url}bzImage", filename="/tmp/eupnea-update/bzImage")
                urlretrieve(f"{url}modules.tar.xz", filename="/tmp/eupnea-update/modules.tar.xz")
    except URLError:
        print("\033[91m" + "Failed to reach github. Check your internet connection and try again" + "\033[0m")
        exit(1)


# Configure distro agnostic options
def flash_kernel() -> None:
    print("\n\033[96m" + "Flashing new kernel" + "\033[0m")

    print("Extracting kernel modules")
    rmdir("/lib/modules")

    # modules tar contains /lib/modules, so it's extracted to / and --skip-old-files is used to prevent overwriting
    # other files in /lib
    bash(f"tar xpf /tmp/eupnea-update/modules.tar.xz --skip-old-files -C / --checkpoint=.10000")
    print("")  # break line after tar

    print("Extracting kernel headers")
    # TODO: extract kernel headers
    print("")  # break line

    # get uuid of rootfs partition
    rootfs_partuuid = bash(f"blkid -o value -s PARTUUID {device}2")
    if rootfs_partuuid == "":
        print("\033[91m" + "Failed to get rootfs partition uuid" + "\033[0m")
        exit(1)

    print("Downloading default command line from github")
    try:
        temp_cmdline = urlopen(
            "https://raw.githubusercontent.com/eupnea-linux/eupnea/main/configs/kernel.flags").read().decode(
            "utf-8")
    except URLError:
        print("\033[91m" + "Failed to reach github. Fallback to hardcoded default cmdline" + "\033[0m")
        temp_cmdline = "console=tty1 root=PARTUUID=${USB_ROOTFS} i915.modeset=1 rootwait rw fbcon=logo-pos:center" \
                       ",logo-count:1 loglevel=0 splash"
    # get partuuid of rootfs
    new_cmdline = temp_cmdline.replace("${USB_ROOTFS}", rootfs_partuuid)
    with open("kernel.flags", "w") as file:
        file.write(new_cmdline)

    print("Signing kernel")
    bash("futility vbutil_kernel --arch x86_64 --version 1 --keyblock /usr/share/vboot/devkeys/kernel.keyblock"
         + " --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk --bootloader kernel.flags" +
         " --config kernel.flags --vmlinuz /tmp/eupnea-update/bzImage --pack /tmp/eupnea-update/bzImage.signed")

    print("Flashing kernel")
    bash(f"dd if=/tmp/eupnea-update/bzImage.signed of={device}1")


if __name__ == "__main__":
    # Elevate script to root
    if not os.geteuid() == 0:
        sudo_args = ['sudo', sys.executable] + sys.argv + [os.environ]
        os.execlpe('sudo', *sudo_args)
    args = process_args()

    if args.dev_build:
        print("\033[93m" + "Using dev release" + "\033[0m")
        skip_dev_question = True
    if args.alt:
        print("\033[93m" + "Using alt kernel" + "\033[0m")
        skip_version_question = True
    if args.exp:
        print("\033[93m" + "Using experimental kernel" + "\033[0m")
        skip_version_question = True
    if args.mainline:
        print("\033[93m" + "Using mainline kernel" + "\033[0m")
        skip_version_question = True
    if args.local_path:
        print("\033[93m" + "Using local path" + "\033[0m")
        skip_version_question = True
    set_verbose(args.verbose)  # set verbose in functions.py

    # read root partition mount
    root_part = bash("mount | grep ' / ' | cut -d' ' -f 1")
    device = root_part[:len(root_part) - 1]  # get device "name"
    prepare_host()
    if args.local_path is None:
        # Print download progress in terminal
        t = Thread(target=download_kernel)
        t.start()
        sleep(1)
        while t.is_alive():
            print(".", end="", flush=True)
            sleep(1)
        print("")
    else:
        if not args.local_path.endswith("/"):
            kernel_path = f"{args.local_path}/"
        else:
            kernel_path = args.local_path
        print("\033[96m" + "Using local kernel files" + "\033[0m")
        cpfile(f"{kernel_path}bzImage", "/tmp/eupnea-update/bzImage")
        cpfile(f"{kernel_path}modules.tar.xz", "/tmp/eupnea-update/modules.tar.xz")

    flash_kernel()
    print("\033[92m" + "Kernel update complete!" + "\033[0m")
